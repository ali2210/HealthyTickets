// Code generated by protoc-gen-go. DO NOT EDIT.
// source: other/cloudmedia/media/media.proto

/*
Package media is a generated protocol buffer package.

It is generated from these files:
	other/cloudmedia/media/media.proto

It has these top-level messages:
	IMAGE_METADATA
	MediaStream
*/
package media

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TOKEN_CATEGORY int32

const (
	TOKEN_CATEGORY_NON_FUNGIABLE_TOKEN TOKEN_CATEGORY = 0
	TOKEN_CATEGORY_FUNGIABLE_TOKEN     TOKEN_CATEGORY = 1
	TOKEN_CATEGORY_SOUL_BOUND_TOKEN    TOKEN_CATEGORY = 2
)

var TOKEN_CATEGORY_name = map[int32]string{
	0: "NON_FUNGIABLE_TOKEN",
	1: "FUNGIABLE_TOKEN",
	2: "SOUL_BOUND_TOKEN",
}
var TOKEN_CATEGORY_value = map[string]int32{
	"NON_FUNGIABLE_TOKEN": 0,
	"FUNGIABLE_TOKEN":     1,
	"SOUL_BOUND_TOKEN":    2,
}

func (x TOKEN_CATEGORY) String() string {
	return proto.EnumName(TOKEN_CATEGORY_name, int32(x))
}
func (TOKEN_CATEGORY) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Descriptor_Category int32

const (
	Descriptor_Category_Text  Descriptor_Category = 0
	Descriptor_Category_Video Descriptor_Category = 1
	Descriptor_Category_Audio Descriptor_Category = 2
	Descriptor_Category_Image Descriptor_Category = 3
)

var Descriptor_Category_name = map[int32]string{
	0: "Text",
	1: "Video",
	2: "Audio",
	3: "Image",
}
var Descriptor_Category_value = map[string]int32{
	"Text":  0,
	"Video": 1,
	"Audio": 2,
	"Image": 3,
}

func (x Descriptor_Category) String() string {
	return proto.EnumName(Descriptor_Category_name, int32(x))
}
func (Descriptor_Category) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type IMAGE_METADATA struct {
	Name      string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type      string            `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Created   string            `protobuf:"bytes,3,opt,name=created" json:"created,omitempty"`
	Tokens    TOKEN_CATEGORY    `protobuf:"varint,4,opt,name=tokens,enum=media.TOKEN_CATEGORY" json:"tokens,omitempty"`
	MyProfile bool              `protobuf:"varint,5,opt,name=MyProfile,json=myProfile" json:"MyProfile,omitempty"`
	Cdr       map[string]string `protobuf:"bytes,6,rep,name=cdr" json:"cdr,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Timeline  string            `protobuf:"bytes,7,opt,name=timeline" json:"timeline,omitempty"`
	Tags      string            `protobuf:"bytes,8,opt,name=tags" json:"tags,omitempty"`
}

func (m *IMAGE_METADATA) Reset()                    { *m = IMAGE_METADATA{} }
func (m *IMAGE_METADATA) String() string            { return proto.CompactTextString(m) }
func (*IMAGE_METADATA) ProtoMessage()               {}
func (*IMAGE_METADATA) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IMAGE_METADATA) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *IMAGE_METADATA) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *IMAGE_METADATA) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *IMAGE_METADATA) GetTokens() TOKEN_CATEGORY {
	if m != nil {
		return m.Tokens
	}
	return TOKEN_CATEGORY_NON_FUNGIABLE_TOKEN
}

func (m *IMAGE_METADATA) GetMyProfile() bool {
	if m != nil {
		return m.MyProfile
	}
	return false
}

func (m *IMAGE_METADATA) GetCdr() map[string]string {
	if m != nil {
		return m.Cdr
	}
	return nil
}

func (m *IMAGE_METADATA) GetTimeline() string {
	if m != nil {
		return m.Timeline
	}
	return ""
}

func (m *IMAGE_METADATA) GetTags() string {
	if m != nil {
		return m.Tags
	}
	return ""
}

type MediaStream struct {
	Name         string              `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	IdentityCode string              `protobuf:"bytes,2,opt,name=identity_code,json=identityCode" json:"identity_code,omitempty"`
	Datecreated  string              `protobuf:"bytes,3,opt,name=datecreated" json:"datecreated,omitempty"`
	Path         string              `protobuf:"bytes,4,opt,name=path" json:"path,omitempty"`
	Category     Descriptor_Category `protobuf:"varint,5,opt,name=category,enum=media.Descriptor_Category" json:"category,omitempty"`
}

func (m *MediaStream) Reset()                    { *m = MediaStream{} }
func (m *MediaStream) String() string            { return proto.CompactTextString(m) }
func (*MediaStream) ProtoMessage()               {}
func (*MediaStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MediaStream) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MediaStream) GetIdentityCode() string {
	if m != nil {
		return m.IdentityCode
	}
	return ""
}

func (m *MediaStream) GetDatecreated() string {
	if m != nil {
		return m.Datecreated
	}
	return ""
}

func (m *MediaStream) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *MediaStream) GetCategory() Descriptor_Category {
	if m != nil {
		return m.Category
	}
	return Descriptor_Category_Text
}

func init() {
	proto.RegisterType((*IMAGE_METADATA)(nil), "media.IMAGE_METADATA")
	proto.RegisterType((*MediaStream)(nil), "media.MediaStream")
	proto.RegisterEnum("media.TOKEN_CATEGORY", TOKEN_CATEGORY_name, TOKEN_CATEGORY_value)
	proto.RegisterEnum("media.Descriptor_Category", Descriptor_Category_name, Descriptor_Category_value)
}

func init() { proto.RegisterFile("other/cloudmedia/media/media.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 447 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xd1, 0x6b, 0x9b, 0x50,
	0x14, 0xc6, 0xab, 0x26, 0xa9, 0x9e, 0x6c, 0x99, 0xdc, 0x74, 0x4c, 0xc2, 0x18, 0x92, 0xbd, 0x84,
	0xc2, 0xd2, 0x91, 0x41, 0x19, 0x7b, 0x9a, 0x4d, 0x5c, 0x08, 0x6b, 0x74, 0x58, 0x33, 0xd8, 0x93,
	0xdc, 0x79, 0xcf, 0x52, 0x69, 0xf4, 0x86, 0x9b, 0x9b, 0x31, 0xff, 0xaf, 0xbd, 0xec, 0xbf, 0x1b,
	0xde, 0x68, 0x69, 0x4a, 0x5f, 0xe4, 0x3b, 0x3f, 0x0f, 0xe7, 0x9c, 0xef, 0x53, 0x18, 0x72, 0x79,
	0x8b, 0xe2, 0x22, 0xdd, 0xf0, 0x3d, 0xcb, 0x91, 0x65, 0xf4, 0xe2, 0xc1, 0x73, 0xbc, 0x15, 0x5c,
	0x72, 0xd2, 0x56, 0xc5, 0xf0, 0x9f, 0x0e, 0xbd, 0xc5, 0xd2, 0x9b, 0xfb, 0xc9, 0xd2, 0x8f, 0xbd,
	0x99, 0x17, 0x7b, 0x84, 0x40, 0xab, 0xa0, 0x39, 0x3a, 0x9a, 0xab, 0x8d, 0xac, 0x48, 0xe9, 0x8a,
	0xc9, 0x72, 0x8b, 0x8e, 0x7e, 0x60, 0x95, 0x26, 0x0e, 0x9c, 0xa6, 0x02, 0xa9, 0x44, 0xe6, 0x18,
	0x0a, 0x37, 0x25, 0x79, 0x07, 0x1d, 0xc9, 0xef, 0xb0, 0xd8, 0x39, 0x2d, 0x57, 0x1b, 0xf5, 0x26,
	0x2f, 0xc7, 0x87, 0xcd, 0x71, 0xf8, 0xd5, 0x0f, 0x92, 0xa9, 0x17, 0xfb, 0xf3, 0x30, 0xfa, 0x11,
	0xd5, 0x4d, 0xe4, 0x35, 0x58, 0xcb, 0xf2, 0x9b, 0xe0, 0xbf, 0xb2, 0x0d, 0x3a, 0x6d, 0x57, 0x1b,
	0x99, 0x91, 0x95, 0x37, 0x80, 0xbc, 0x07, 0x23, 0x65, 0xc2, 0xe9, 0xb8, 0xc6, 0xa8, 0x3b, 0x79,
	0x53, 0x4f, 0x3a, 0x3e, 0x79, 0x3c, 0x65, 0xc2, 0x2f, 0xa4, 0x28, 0xa3, 0xaa, 0x95, 0x0c, 0xc0,
	0x94, 0x59, 0x8e, 0x9b, 0xac, 0x40, 0xe7, 0x54, 0x5d, 0x76, 0x5f, 0x2b, 0x23, 0x74, 0xbd, 0x73,
	0xcc, 0xda, 0x08, 0x5d, 0xef, 0x06, 0x97, 0x60, 0x36, 0x03, 0x88, 0x0d, 0xc6, 0x1d, 0x96, 0xb5,
	0xf7, 0x4a, 0x92, 0x33, 0x68, 0xff, 0xa6, 0x9b, 0x7d, 0xe3, 0xfd, 0x50, 0x7c, 0xd2, 0x3f, 0x6a,
	0xc3, 0xbf, 0x1a, 0x74, 0x97, 0xd5, 0x39, 0x37, 0x52, 0x20, 0xcd, 0x9f, 0x0c, 0xee, 0x2d, 0x3c,
	0xcf, 0x18, 0x16, 0x32, 0x93, 0x65, 0x92, 0x72, 0xd6, 0x4c, 0x79, 0xd6, 0xc0, 0x29, 0x67, 0x48,
	0x5c, 0xe8, 0x32, 0x2a, 0xf1, 0x38, 0xcd, 0x87, 0xa8, 0x1a, 0xbd, 0xa5, 0xf2, 0x56, 0xe5, 0x69,
	0x45, 0x4a, 0x93, 0x4b, 0x30, 0x53, 0x2a, 0x71, 0xcd, 0x45, 0xa9, 0x52, 0xeb, 0x4d, 0x06, 0x75,
	0x3a, 0x33, 0xdc, 0xa5, 0x22, 0xdb, 0x4a, 0x2e, 0x92, 0x69, 0xdd, 0x11, 0xdd, 0xf7, 0x9e, 0xc7,
	0xd0, 0x3b, 0xfe, 0x10, 0xe4, 0x15, 0xf4, 0x83, 0x30, 0x48, 0xbe, 0xac, 0x82, 0xf9, 0xc2, 0xbb,
	0xba, 0xf6, 0x13, 0xf5, 0xde, 0x3e, 0x21, 0x7d, 0x78, 0xf1, 0x18, 0x6a, 0xe4, 0x0c, 0xec, 0x9b,
	0x70, 0x75, 0x9d, 0x5c, 0x85, 0xab, 0x60, 0x56, 0x53, 0xfd, 0xfc, 0x33, 0xf4, 0x9f, 0x58, 0x4b,
	0x4c, 0x68, 0xc5, 0xf8, 0x47, 0xda, 0x27, 0xc4, 0x82, 0xf6, 0xf7, 0x8c, 0x21, 0xb7, 0xb5, 0x4a,
	0x7a, 0x7b, 0x96, 0x71, 0x5b, 0xaf, 0xe4, 0x22, 0xa7, 0x6b, 0xb4, 0x8d, 0x9f, 0x1d, 0xf5, 0x63,
	0x7e, 0xf8, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x95, 0x50, 0x0b, 0x51, 0xbe, 0x02, 0x00, 0x00,
}
